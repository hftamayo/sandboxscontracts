https://cryptomarketpool.com/payable-modifier-in-solidity-smart-contracts/
https://www.codementor.io/@rogargon/exercise-simple-solidity-smart-contract-for-ethereum-blockchain-m736khtby

como usar openzepellin:
https://www.youtube.com/watch?v=PdNxXGGWJRI
https://www.youtube.com/watch?v=2oVMD9k67Wk&list=PLbbtODcOYIoFdQ37ydykQNO-MNGER6mtd
https://www.youtube.com/channel/UCJWh7F3AFyQ_x01VKzr9eyA


Estructura de un smart contract ETH:
https://docs.soliditylang.org/en/v0.8.16/structure-of-a-contract.html


Documentacion de scaffold ETH:
https://docs.scaffoldeth.io/scaffold-eth/getting-started/quick-start


Challenge 0:
faucets para la red goerli:
faucet.paradigm.xyz
https://www.rinkebyfaucet.com/
https://goerli-faucet.pk910.de/
https://goerlifaucet.com/

link bien util: https://blog.logrocket.com/top-4-ethereum-testnets-testing-smart-contracts/

link de contrato deployado: hftamayoc0.surge.sh

datos enviados sobre el challenge0:
https://hftamayoc0.surge.sh
https://goerli.etherscan.io/address/0x3fe3236f9b0f5c3d4a5b6a4cf1f90b852ccc7396

Faucet para la red Ropsten:
https://faucet.egorfine.com/


CHALLENGE1:
repo base para la solucion: 
https://leogau.dev/2022/02/07/how-i-implemented-speed-run-ethereum-challenge-1-decentralized-staking-app.html

datos enviados sobre el challenge1:
challenge 1:
yarn account: 0xa9267ccaa89e642ba68367f9ab7169dd953ead96

yarn deploy:
0x9BCDC5E22A5e84B188B32F33b2154cD4F1B090Fa
hftamayoc1.surge.sh


Challenge 2: 
repo bases para la solucion:
https://github.com/StErMi/scaffold-eth-challenge-2-token-vendor -> paso 6 de 6 tests
https://leogau.dev/2022/05/31/how-i-implemented-speed-run-ethereum-challenge-2-token-vendor.html paso 5 de 6 tests


yarn generate: 0xcb4e8d9dc9fdcde685203210ad714d47f8a8a225

datos enviados:
yarn deploy:
deployed at 0x2CB93e3759e188f83203DeEd05BB22C53F6F7be8 with 637715 gas
hftamayoc202.surge.sh

Esta parte nunca funciono porque olvide ejecutar un paso que esta en el writeup 
y es la relativa a la modificacion del frontend (01_deploy_vendor.js y App.jsx), para resolverlo:

1. me tome casi 2 semanas en volver a tener ganas de depurar esto
2. un test me da error si el frontend (yarn start) esta arriba
3. al ejecutar el yarn deploy me aparecieron 2 token deployados, uno de YourToken.sol y el otro de Vendor.sol

los datos del deploy son:

yarn account: 0x3448e8dfb3c0e8182947e98b7dfe0a2058cb3521
yarn deploy:
YourToken.sol: 0xB769002fa2DB4F2a7f9903bA3A7dBfcf8D4F6897
Vendor.sol: 0xA3784D98A2f9A5908C167eDbe0eeC773ee87b0E7
hftamayoc206.surge.sh

Datos subidos a la tarea:
https://hftamayoc206.surge.sh
https://goerli.etherscan.io/address/0x3448e8dfb3c0e8182947e98b7dfe0a2058cb3521

puesto que son 2 contratos deployados subi mi yarn account, sin embargo, fue rechazado, 
pense que habia un mecanismo de verificacion, entonces subire el link de Vendor.sol:
https://goerli.etherscan.io/address/0xA3784D98A2f9A5908C167eDbe0eeC773ee87b0E7


recursos proporcionados por Kevin Jones para obtener ayuda para proyectos Solidity:
scp channel: https://t.me/smartcontractprogrammer
https://t.me/dev_solidity
https://discord.gg/m9STdsU6

Challenge 3:
repo base: https://github.com/chavda-bhavik/scafold-eth-dice-game

yarn generate: 0x05efc9cf49b9ec4a4fd42d6691c2c130f4257a03

yarn deploy: 
DiceGame: 0x44E98e4C3C4a7f71E6bF6814f021daCB1d1Cae3A
RiggedRoll: https://goerli.etherscan.io/address/0xE01bd5F2A95F3A3A602709930e5A9DbAC263c065
yarn surge: https://hftamayoc301.surge.sh


segundo intento:
yarn generate: 0x052e57a66c4d347150ac9a6176c04d1775aa8e4d
DiceGame: 0x7da58e21487648906a00B4bd24733fDd6Fc4F772
RiggedRoll: https://goerli.etherscan.io/address/0x8bCcb858bF6f6555849F9194f6bCD420dDFa01D0
yarn surge: https://hftamayoc302.surge.sh

Me daba un error que este codigo acepta riggedRoll cuando la ronda es mayor a 2, aun y cuando hay una validacion este error salta

probaré este codigo:

https://github.com/vanities/speedrun-ethereum/blob/master/challenge-3-dice-game/packages/hardhat/contracts/DiceGame.sol

yarn generate: 0x3a6f09ab0d414b9f9e8f8fbfbecaee365d04573a
RiggedRoll: https://goerli.etherscan.io/address/0x3Fe7f52BCA828cd1Aa770d26fdf9fF4bF519CFE9
yarn surge: https://hftamayoc303.surge.sh

challenge 4:
repo de refencia: https://github.com/ijonas/ethspeedrun-dex/blob/challenge-3-single-pool-dex/packages/hardhat/contracts/DEX.sol


siguiendo el tutorial original fueron un poco mas de una semana de no tener resultados, en el grupo de telegram consegui este repo:
https://github.com/DiyaaDaoud/scaffold-eh-challenge4-building-the-DEX

comparando parece que si tenia que modificar el codigo y el script de testing es totalmente distinto al original.

Probando con este repo en el test me da 4 aprobados y 2 fallidos, pregunté sobre los errores en el canal de telegram pero aun no me contestan








yarn generate: 0x4811462092bbe93808eb6e8d9ee9a4ab2c8d02b8
deploy de balloons:
deploy de dex: